/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AnswerResponse,
  AnswerSubmit,
  HTTPValidationError,
  PracticeResult,
  PracticeSettings,
  PracticeSettingsResponse,
  QuestionResponse
} from '../../scheme/models'
import { customInstance } from '.././axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Test Db Connection
 */
export const testDbConnectionApiDbTestGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `http://localhost:8000/api/db-test`, method: 'GET', signal
    },
      options);
    }
  

export const getTestDbConnectionApiDbTestGetQueryKey = () => {
    return [`http://localhost:8000/api/db-test`] as const;
    }

    
export const getTestDbConnectionApiDbTestGetQueryOptions = <TData = Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTestDbConnectionApiDbTestGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>> = ({ signal }) => testDbConnectionApiDbTestGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError, TData> & { queryKey: QueryKey }
}

export type TestDbConnectionApiDbTestGetQueryResult = NonNullable<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>>
export type TestDbConnectionApiDbTestGetQueryError = unknown


export function useTestDbConnectionApiDbTestGet<TData = Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useTestDbConnectionApiDbTestGet<TData = Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useTestDbConnectionApiDbTestGet<TData = Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Test Db Connection
 */

export function useTestDbConnectionApiDbTestGet<TData = Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof testDbConnectionApiDbTestGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getTestDbConnectionApiDbTestGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Start Practice
 */
export const startPracticeApiPracticeStartGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `http://localhost:8000/api/practice/start`, method: 'GET', signal
    },
      options);
    }
  

export const getStartPracticeApiPracticeStartGetQueryKey = () => {
    return [`http://localhost:8000/api/practice/start`] as const;
    }

    
export const getStartPracticeApiPracticeStartGetQueryOptions = <TData = Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStartPracticeApiPracticeStartGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>> = ({ signal }) => startPracticeApiPracticeStartGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError, TData> & { queryKey: QueryKey }
}

export type StartPracticeApiPracticeStartGetQueryResult = NonNullable<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>>
export type StartPracticeApiPracticeStartGetQueryError = unknown


export function useStartPracticeApiPracticeStartGet<TData = Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useStartPracticeApiPracticeStartGet<TData = Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useStartPracticeApiPracticeStartGet<TData = Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Start Practice
 */

export function useStartPracticeApiPracticeStartGet<TData = Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof startPracticeApiPracticeStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getStartPracticeApiPracticeStartGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Save Settings
 */
export const saveSettingsApiPracticeSettingsPost = (
    practiceSettings: PracticeSettings,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PracticeSettingsResponse>(
      {url: `http://localhost:8000/api/practice/settings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: practiceSettings
    },
      options);
    }
  


export const getSaveSettingsApiPracticeSettingsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSettingsApiPracticeSettingsPost>>, TError,{data: PracticeSettings}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof saveSettingsApiPracticeSettingsPost>>, TError,{data: PracticeSettings}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveSettingsApiPracticeSettingsPost>>, {data: PracticeSettings}> = (props) => {
          const {data} = props ?? {};

          return  saveSettingsApiPracticeSettingsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveSettingsApiPracticeSettingsPostMutationResult = NonNullable<Awaited<ReturnType<typeof saveSettingsApiPracticeSettingsPost>>>
    export type SaveSettingsApiPracticeSettingsPostMutationBody = PracticeSettings
    export type SaveSettingsApiPracticeSettingsPostMutationError = HTTPValidationError

    /**
 * @summary Save Settings
 */
export const useSaveSettingsApiPracticeSettingsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveSettingsApiPracticeSettingsPost>>, TError,{data: PracticeSettings}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof saveSettingsApiPracticeSettingsPost>>,
        TError,
        {data: PracticeSettings},
        TContext
      > => {

      const mutationOptions = getSaveSettingsApiPracticeSettingsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Question
 */
export const getQuestionApiPracticeQuestionPracticeIdGet = (
    practiceId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<QuestionResponse[]>(
      {url: `http://localhost:8000/api/practice/question/${practiceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetQuestionApiPracticeQuestionPracticeIdGetQueryKey = (practiceId: number,) => {
    return [`http://localhost:8000/api/practice/question/${practiceId}`] as const;
    }

    
export const getGetQuestionApiPracticeQuestionPracticeIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError = HTTPValidationError>(practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQuestionApiPracticeQuestionPracticeIdGetQueryKey(practiceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>> = ({ signal }) => getQuestionApiPracticeQuestionPracticeIdGet(practiceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(practiceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetQuestionApiPracticeQuestionPracticeIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>>
export type GetQuestionApiPracticeQuestionPracticeIdGetQueryError = HTTPValidationError


export function useGetQuestionApiPracticeQuestionPracticeIdGet<TData = Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetQuestionApiPracticeQuestionPracticeIdGet<TData = Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetQuestionApiPracticeQuestionPracticeIdGet<TData = Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Question
 */

export function useGetQuestionApiPracticeQuestionPracticeIdGet<TData = Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionApiPracticeQuestionPracticeIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetQuestionApiPracticeQuestionPracticeIdGetQueryOptions(practiceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Submit Answer
 */
export const submitAnswerApiPracticeAnswerQuestionIdPost = (
    questionId: number,
    answerSubmit: AnswerSubmit,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<AnswerResponse>(
      {url: `http://localhost:8000/api/practice/answer/${questionId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: answerSubmit
    },
      options);
    }
  


export const getSubmitAnswerApiPracticeAnswerQuestionIdPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitAnswerApiPracticeAnswerQuestionIdPost>>, TError,{questionId: number;data: AnswerSubmit}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof submitAnswerApiPracticeAnswerQuestionIdPost>>, TError,{questionId: number;data: AnswerSubmit}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof submitAnswerApiPracticeAnswerQuestionIdPost>>, {questionId: number;data: AnswerSubmit}> = (props) => {
          const {questionId,data} = props ?? {};

          return  submitAnswerApiPracticeAnswerQuestionIdPost(questionId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubmitAnswerApiPracticeAnswerQuestionIdPostMutationResult = NonNullable<Awaited<ReturnType<typeof submitAnswerApiPracticeAnswerQuestionIdPost>>>
    export type SubmitAnswerApiPracticeAnswerQuestionIdPostMutationBody = AnswerSubmit
    export type SubmitAnswerApiPracticeAnswerQuestionIdPostMutationError = HTTPValidationError

    /**
 * @summary Submit Answer
 */
export const useSubmitAnswerApiPracticeAnswerQuestionIdPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitAnswerApiPracticeAnswerQuestionIdPost>>, TError,{questionId: number;data: AnswerSubmit}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof submitAnswerApiPracticeAnswerQuestionIdPost>>,
        TError,
        {questionId: number;data: AnswerSubmit},
        TContext
      > => {

      const mutationOptions = getSubmitAnswerApiPracticeAnswerQuestionIdPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Results
 */
export const getResultsApiPracticeResultsPracticeIdGet = (
    practiceId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PracticeResult>(
      {url: `http://localhost:8000/api/practice/results/${practiceId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetResultsApiPracticeResultsPracticeIdGetQueryKey = (practiceId: number,) => {
    return [`http://localhost:8000/api/practice/results/${practiceId}`] as const;
    }

    
export const getGetResultsApiPracticeResultsPracticeIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError = HTTPValidationError>(practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetResultsApiPracticeResultsPracticeIdGetQueryKey(practiceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>> = ({ signal }) => getResultsApiPracticeResultsPracticeIdGet(practiceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(practiceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetResultsApiPracticeResultsPracticeIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>>
export type GetResultsApiPracticeResultsPracticeIdGetQueryError = HTTPValidationError


export function useGetResultsApiPracticeResultsPracticeIdGet<TData = Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetResultsApiPracticeResultsPracticeIdGet<TData = Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetResultsApiPracticeResultsPracticeIdGet<TData = Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Results
 */

export function useGetResultsApiPracticeResultsPracticeIdGet<TData = Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError = HTTPValidationError>(
 practiceId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getResultsApiPracticeResultsPracticeIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetResultsApiPracticeResultsPracticeIdGetQueryOptions(practiceId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



